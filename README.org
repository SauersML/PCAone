#+TITLE: PCAone - Principal Component Analysis All in One

#+OPTIONS: ^:nil

*Current Version: v0.1.0*

PCAone is fast and memory efficient PCA tool implemented in C++ aiming at providing comprehensive features and algorithms for different scenarios.

* Features

- Has both Arnoldi and Halko methods with *out-of-core* implementation.
- Quite Fast and memory efficient with multithreading support and using external MKL or OpenBlas library.
- Supports the [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]], [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]] genetic data formats.
- Supports [[https://github.com/Rosemeis/emu][EMU]] algorithm for scenario with large proportion of missingness.
- Supports [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm for low coverage sequencing scenario with genotype probability as input.
- Supports zstd compressed CSV format for scRNAs data [In progress]

* Installation

** Download pre-compiled binary

We provide pre-compiled program for both Mac and Linux platform. Please check the released packages.

** Build from source

Default is without external mkl or openblas support. With external mkl or openblas support, change the =MKLROOT= or =OPENBLAS_ROOT= in *Makefile* to your own path. If it complains that there is no =lapack= or =iomp5= lib for Mac users, set the =LIBIOMP5= or =LAPACK_ROOT= to the correct path as well. Also, the other dependence is [[https://github.com/facebook/zstd][zstd]] library. 
#+begin_src sh
git clone https://github.com/Zilong-Li/PCAone.git
cd PCAone
make
#+end_src

* Usage

#+begin_src plain
PCA All In One.
Usage:
  ./PCAone [OPTION...]

  -h, --help     print list of main options.
  -H, --helpall  print list of all options.

 Main options:
  -k, --eigs INT       top k components to be calculated.[10]
      --bfile PREFIX   prefix to PLINK .bed/.bim/.fam files.
      --bgen FILE      BGEN file.
      --beagle FILE    beagle file.
  -a, --arnoldi        use implicit restarted Arnoldi method instead of
                       default Randomized SVD (Halko).
  -f, --fast           force to use fast super power iterations for Halko.
      --emu            use EMU algorithm for data with large proportion of
                       missingness.
      --pcangsd        use PCAngsd algorithm for data with genotype
                       probability.
  -m, --memory DOUBLE  specify the RAM usage in GB unit instead of exploiting
                       the RAM of the server.
  -n, --threads INT    number of threads. [1]
  -o, --out PREFIX     prefix for output files.
  -v, --verbose        verbose message output.

#+end_src

* Citation

TBD

* Acknowledgements

The bgen lib is ported from [[https://github.com/jeremymcrae/bgen][jeremymcrae/bgen: fast bgen parser for python]].
