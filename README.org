#+TITLE: PCAone - Principal Component Analysis All in One

#+OPTIONS: ^:nil

[[https://github.com/Zilong-Li/PCAone/actions/workflows/linux.yml/badge.svg]]
[[https://github.com/Zilong-Li/PCAone/actions/workflows/mac.yml/badge.svg]]
[[https://anaconda.org/bioconda/pcaone][https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat]]
[[https://github.com/Zilong-Li/PCAone/releases/latest][https://img.shields.io/github/v/release/Zilong-Li/PCAone.svg]]
[[https://github.com/Zilong-Li/PCAone/blob/main/LICENSE][https://img.shields.io/github/license/Zilong-Li/PCAone.svg]]

PCAone is a fast and memory efficient PCA tool implemented in C++ aiming at providing comprehensive features and algorithms for different scenarios. PCAone implements 3 fast PCA algorithms for finding the top eigenvectors of large datasets, which are [[https://en.wikipedia.org/wiki/Arnoldi_iteration][Implicitly Restarted Arnoldi Method]] (IRAM), [[https://www.ijcai.org/proceedings/2017/468][single pass Randomized SVD]] (RSVD) and our own fancy RSVD method with window based power iterations. PCAone supports multiple different input formats, such as [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]], [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]] genetic data formats and a general CSV format for scRNAs data. For genetics data, PCAone also implements [[https://github.com/Rosemeis/emu][EMU]] and [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm for data with missingness and uncertainty.

[[file:misc/architecture.png]]

* Table of Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#quickstart][Quickstart]]
  - [[#download-pcaone][Download PCAone]]
  - [[#download-examples][Download examples]]
  - [[#examples][Examples]]
  - [[#make-pca-plots][Make PCA plots]]
- [[#features][Features]]
- [[#system-requirements][System requirements]]
- [[#installation][Installation]]
  - [[#download-binary][Download binary]]
  - [[#via-conda][Via conda]]
  - [[#build-from-source][Build from source]]
- [[#documentation][Documentation]]
  - [[#input-formats][Input formats]]
  - [[#output-files][Output files]]
  - [[#options][Options]]
  - [[#running-mode][Running mode]]
- [[#citation][Citation]]
- [[#acknowledgements][Acknowledgements]]
#+END_QUOTE

* Quickstart

You can run the following on Linux to have a quick start.

#+begin_src sh
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip
unzip PCAone-avx2-Linux.zip
wget http://popgen.dk/zilong/datahub/pca/examples.tar.gz
tar -xzf examples.tar.gz
# calculating top 10 PCs running in memory if having big RAM
./PCAone --bfile examples/asia -k 10
# calculating top 10 PCs running out-of-core using only 2 GBs RAM
./PCAone --bfile examples/asia -k 10 -m 2
R -s -e 'df=read.table("pcaone.eigvecs", h=F);plot(df[,1:2], xlab="PC1", ylab="PC2");'
#+end_src

You will find those files in your current directory.

#+begin_src plain
.
├── PCAone            # program
├── Rplots.pdf        # pca plot
├── examples          # folder of examples data
├── pcaone.eigvals    # eigenvalues
├── pcaone.eigvecs    # eigenvectors, the PCs you need to plot
├── pcaone.perm.bed   # the permuted bed file
├── pcaone.perm.bim   # the permuted bim file
├── pcaone.perm.fam   # the permuted fam file
└── pcaone.log        # log file
#+end_src

** Download PCAone
- Linux
#+begin_src shell
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip || curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip
unzip PCAone-avx2-Linux.zip
#+end_src

If your server is too old to support =avx2= instruction, either upgrade the server or download the following version.

#+begin_src shell
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Linux.zip || curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Linux.zip
unzip PCAone-x64-Linux.zip
#+end_src

- Mac
#+begin_src shell
curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Mac.zip || wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Mac.zip
unzip PCAone-avx2-Mac.zip
#+end_src

Since you are using Mac, I suppose this version just works.

** Download examples
#+begin_src shell
wget http://popgen.dk/zilong/datahub/pca/examples.tar.gz || curl -LO http://popgen.dk/zilong/datahub/pca/examples.tar.gz
tar -xzf examples.tar.gz
#+end_src
You should find a fold named =examples= with some test data.
** Examples

- use *default fast fancy RSVD* algorithm for large datasets
#+begin_src shell
# running in RAM using 10 threads to calculate top 10 PCs
./PCAone --bfile examples/asia -k 10 -n 10 -o out
# running out-of-core using only 2GB memory
./PCAone --bfile examples/asia -k 10 -n 10 -o out -m 2
#+end_src

- use *IRAM* algorithm for small or medium datasets
#+begin_src shell
# running out-of-core using only 2GB memory
./PCAone --bfile examples/asia -k 10 -n 10 -o out -m 2 -a
#+end_src

- use *normal RSVD* algorithm for large datasets
#+begin_src shell
# running out-of-core using only 2GB memory
./PCAone --bfile examples/asia -k 10 -n 10 -o out -m 2 -h
#+end_src

- run PCA on *scRNAs* data
#+begin_src shell
# assume data is already normalized
./PCAone --csv examples/test.csv.zst -k 10 -n 10 -o out -m 2 -a
# apply normalization by count per median(CPMED) use --cpmed option
./PCAone --csv examples/test.csv.zst -k 10 -n 10 -o out -m 2 -a --cpmed
#+end_src

- run *EMU* using *fancy RSVD* for data with lots of missingness
#+begin_src shell
./PCAone --bfile examples/test.emu -k 3 -n 10 -o out -m 2 --emu
#+end_src

- run *PCAngsd* using *IRAM* for genotype likelihoods
#+begin_src shell
./PCAone --beagle examples/test.bgl.gz -k 3 -n 10 -o out -a --pcangsd
#+end_src

** Make PCA plots

#+begin_src sh
R -s -e 'df=read.table("out.eigvecs", h=F);plot(df[,1:2], xlab="PC1", ylab="PC2");'
#+end_src

* Features

See [[file:CHANGELOG.org][change log]] here.

- Has both Implicitly Restarted Arnoldi Method (IRAM) and Randomized SVD (RSVD) with *out-of-core* implementation.
- Implements our new fast fancy Randomized SVD algorithm for tera-scale dataset.
- Quite fast with multi-threading support using high performance library [[https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onemkl.html#gs.8jsfgz][MKL]] or [[https://www.openblas.net/][OpenBLAS]] as backend.
- Supports the [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]], [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]] genetic data formats.
- Supports a general [[https://github.com/facebook/zstd][zstd]] compressed CSV format for scRNAs data
- Supports [[https://github.com/Rosemeis/emu][EMU]] algorithm for scenario with large proportion of missingness.
- Supports [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm for low coverage sequencing scenario with genotype likelihood as input.

* System requirements

=PCAone= can be running on a normal computer with small amount of RAM and =x86-64= instruction set architecture. =PCAone= has been tested on both =MacOS= and =Linux= system. To build PCAone from the source code, the following dependencies are required:

- GCC/Clang compiler with C++11 support
- GNU make
- zlib
- libomp (optional on MacOS)

* Installation
** Download binary

There are compiled binaries provided for both Linux and Mac platform. Check [[https://github.com/Zilong-Li/PCAone/releases][the releases page]] to download one or find commands for downloading the latest version in [[#Quickstart][Quickstart]].

** Via conda

PCAone is available from [[https://anaconda.org/bioconda/pcaone][bioconda]].


#+begin_src sh
conda config --add channels bioconda
conda install pcaone
#+end_src

** Build from source
*** With MKL or OpenBLAS as backend

Build PCAone dynamically with MKL can maximize the performance since the faster threading layer =libiomp5= will be linked at runtime. One can obtain the MKL by one of the following option:

- install =mkl= by conda

#+begin_src sh
conda install mkl mkl-include
git clone https://github.com/Zilong-Li/PCAone.git
cd PCAone
make MKLROOT=${CONDA_PREFIX} # if mkl is installed by conda and you are in conda
#+end_src

- download =mkl= from [[https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html][the website]]

After having =mkl= installed, find the =mkl= root path and replace the path below with your own.
#+begin_src shell
make MKLROOT=/path/to/mklroot # if mkl is downloaded from the website
#+end_src

Alternatively, for advanced user, modify variables directly in =Makefile= and run =make= to use MKL or OpenBlas as backend.

*** Without MKL or OpenBLAS dependency

If you don't want any optimized math library as backend, just run:
#+begin_src shell
git clone https://github.com/Zilong-Li/PCAone.git
cd PCAone
make
#+end_src
If this doesn't work because the server is too outdated, run =make clean && make AVX=0= instead. For Mac users, also run =brew install libomp=.

* Documentation
** Input formats

PCAone is designed to be extensible to accept many different formats. Currently, PCAone can work with SNP major genetic formats to study population structure. such as [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]] and [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]]. Also, PCAone supports a general CSV format compressed by zstd assuming the data is already normalized by the users, which is useful for other datasets requiring specific normalization such as single cell RNAs data.

|----------+-----------------------------------------|
| Option   | Descrition                              |
|----------+-----------------------------------------|
| =--bfile=  | prefix of PLINK .bed/.bim/.fam files.   |
| =--beagle= | path of beagle file compressed by gzip. |
| =--bgen=   | path of BGEN file.                      |
| =--csv=    | path of CSV file compressed by zstd.    |
|----------+-----------------------------------------|

** Output files

|-----------+------------------------------------------------------------------------------------------------------------------|
| Output    | Descrition                                                                                                       |
|-----------+------------------------------------------------------------------------------------------------------------------|
| =.eigvecs=  | eigen vectors are saved in file with suffix =.eigvecs=. each row represents a sample and each col represents a PC. |
| =.eigvals=  | eigen values are saved in file with suffix =.eigvals=. each row represents the eigenvalue of corresponding PC.     |
| =.loadings= | loadings are saved in file with suffix =.loadings=. need to use =--printv= option.                                   |
| =.log=      | log is saved in file with suffix =.log=.                                                                           |
|-----------+------------------------------------------------------------------------------------------------------------------|

** Options

run =./PCAone --help= to show all options. I feature some useful and important options below.

|--------------+--------------------------------------------------------------------------------------|
| Option       | Descrition                                                                           |
|--------------+--------------------------------------------------------------------------------------|
| =-a,--arnoldi= | use fancy RSVD algorithm in PCAone's paper                                           |
| =-f,--fast=    | use fancy RSVD algorithm in PCAone's paper, this is enabled by default               |
| =-h,--halko=   | use normal RSVD algorithm                                                            |
| =-n,--threads= | number of threads                                                                    |
| =-o,--out=     | prefix of output files                                                               |
| =--bands=      | number of bands used by fancy RSVD algorithm. must be =$2^{x}$=.                       |
| =--cpmed=      | normalize values by count per median (CPMED) for scRNAs.                             |
| =--maxp=       | maximum number of iterations for RSVD algorithm.                                     |
| =--no-shuffle= | do not shuffle the input data for fancy RSVD algorithm if it's already been shuffled |
| =--printv=     | print out another eigenvectors or loadings.                                          |
|--------------+--------------------------------------------------------------------------------------|

** Running mode

PCAone has both in-core and out-of-core mode for each algorithm. In default, PCAone will load all data in memory, which is the fastest way to do calculation. However, it is usually not feasible to keep the whole large matrix in memory. In contrast, PCAone allows user to specify the amount of memory using =-m= option.

* Citation

- If you find PCAone helpful, please cite our paper [[https://www.biorxiv.org/content/10.1101/2022.05.25.493261v1][PCAone: fast and accurate out-of-core PCA framework for large scale biobank data]].

- If using EMU algorithm, please also cite [[https://academic.oup.com/bioinformatics/article/37/13/1868/6103565][Large-scale inference of population structure in presence of missingness using PCA]].

- If using PCAngsd algorithm, please also cite [[https://www.genetics.org/content/210/2/719][Inferring Population Structure and Admixture Proportions in Low-Depth NGS Data]].

* Acknowledgements

PCAone use [[https://eigen.tuxfamily.org/index.php?title=Main_Page][Eigen]] for linear algebra operation. The IRAM method is based on [[https://github.com/yixuan/spectra][yixuan/spectra]]. The bgen lib is ported from [[https://github.com/jeremymcrae/bgen][jeremymcrae/bgen]]. The EMU and PCAngsd algorithms are modified from [[https://github.com/Rosemeis][@Jonas]] packages.
