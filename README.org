#+TITLE: PCAone - Principal Component Analysis All in One

#+OPTIONS: ^:nil

[[https://github.com/Zilong-Li/PCAone/actions/workflows/linux.yml/badge.svg]]
[[https://github.com/Zilong-Li/PCAone/actions/workflows/mac.yml/badge.svg]]
[[https://img.shields.io/github/v/release/Zilong-Li/PCAone.svg]]
[[https://img.shields.io/github/license/Zilong-Li/PCAone.svg]]

PCAone is a fast and memory efficient PCA tool implemented in C++ aiming at providing comprehensive features and algorithms for different scenarios. PCAone implements 3 fast PCA algorithms for finding the top eigenvectors of large datasets, which are [[https://en.wikipedia.org/wiki/Arnoldi_iteration][Implicitly Restarted Arnoldi Method]] (IRAM), [[https://www.ijcai.org/proceedings/2017/468][single pass Randomized SVD]] (RSVD) and our own fancy RSVD method with window based power iterations. For genetics data, PCAone also implements [[https://github.com/Rosemeis/emu][EMU]] and [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm.

[[file:misc/architecture.png]]

* Table of Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#quickstart][Quickstart]]
  - [[#download-pcaone][Download PCAone]]
  - [[#download-examples][Download examples]]
  - [[#run-pcaone][Run PCAone]]
- [[#features][Features]]
- [[#installation][Installation]]
  - [[#download-binary][Download binary]]
  - [[#via-conda][Via conda]]
  - [[#build-from-source][Build from source]]
- [[#documentation][Documentation]]
  - [[#input-formats][Input formats]]
  - [[#output-files][Output files]]
  - [[#options][Options]]
  - [[#running-mode][Running mode]]
- [[#citation][Citation]]
- [[#acknowledgements][Acknowledgements]]
#+END_QUOTE

* Quickstart
** Download PCAone
- Linux
#+begin_src shell
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip || curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip
unzip PCAone-avx2-Linux.zip
#+end_src
If your server is too old to support =AVX2= instruction, get your boss to buy a new server or download the following version.
#+begin_src shell
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Linux.zip || curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Linux.zip
unzip PCAone-x64-Linux.zip
#+end_src

- Mac
#+begin_src shell
curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Mac.zip || wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Mac.zip
unzip PCAone-avx2-Mac.zip
#+end_src
Since you are using Mac and rich, I suppose this version just works.

** Download examples
#+begin_src shell
wget http://popgen.dk/zilong/datahub/pca/examples.tar.gz || curl -LO http://popgen.dk/zilong/datahub/pca/examples.tar.gz
tar -xzf examples.tar.gz
#+end_src
You should find a fold named =examples= with files =test.bed=, =test.bim=, =test.fam=, =test.bgl.gz=.

** Run PCAone

- use *Default IRAM* algorithm for small or medium datasets
#+begin_src shell
# running in RAM using 20 threads to calculate top 20 PCs
PCAone --bfile examples/test -k 10 -n 10 -o out
# running out of RAM, only use 2GB memory
PCAone --bfile examples/test -k 10 -n 10 -o out -m 2
#+end_src

- use *normal RSVD* method for large datasets
#+begin_src shell
# running out of RAM using  only 2GB memory
PCAone --bfile examples/test -k 10 -n 10 -o out -h -m 2
#+end_src

- use *fancy RSVD* method for crazy huge datasets
#+begin_src shell
# running out of RAM using  only 2GB memory
PCAone --bfile examples/test -k 10 -n 10 -o out -f --shuffle -m 2
#+end_src

- rung *EMU* with fancy RSVD for data with many missingness
#+begin_src shell
PCAone --bfile examples/test -k 10 -n 10 -o out -f --emu -m 2
#+end_src

- rung *PCAngsd* with genotype likelihoods
#+begin_src shell
PCAone --beagle examples/test.bgl.gz -k 3 -n 10 -o out -h --pcangsd
#+end_src

* Features

See [[file:CHANGELOG.org][change log]] here.

- Has both Implicitly Restarted Arnoldi Method (IRAM) and Randomized SVD (RSVD) with *out-of-core* implementation.
- Implements our new fast fancy Randomized SVD algorithm for tera-scale dataset.
- Quite fast with multi-threading support using high performance library [[https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onemkl.html#gs.8jsfgz][MKL]] or [[https://www.openblas.net/][OpenBLAS]] as backend.
- Supports the [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]], [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]] genetic data formats.
- Supports [[https://github.com/Rosemeis/emu][EMU]] algorithm for scenario with large proportion of missingness.
- Supports [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm for low coverage sequencing scenario with genotype likelihood as input.
- Supports a general [[https://github.com/facebook/zstd][zstd]] compressed CSV format for scRNAs data

* Installation
** Download binary
There are compiled binaries provided for both Mac and Linux platform. Check [[https://github.com/Zilong-Li/PCAone/releases][the releases page]] to download them.
- PCAone no dependency :: follow guide in [[#Quickstart][Quickstart]].
- PCAone with =libiomp5= :: packages named with =iomp5= need runtime library =libiomp5= to be found in your environment =LD_LIBRARY_PATH=.

** Via conda

If you want to use the compiled binary with =libiomp5= dependency, you can simply run the following command in your =conda= environment, which will download the MKL dependency for you and fix the runtime library automatically.
- wget
#+begin_src sh
# have wget installed
/bin/bash -c "$(wget -O - https://raw.githubusercontent.com/Zilong-Li/PCAone/main/install.sh)"
#+end_src
- curl
#+begin_src sh
# have curl installed
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Zilong-Li/PCAone/main/install.sh)"
#+end_src

** Build from source

If you don't want to use MKL of OpenBlas as backends, you can just copy and paste the following code in the terminal without modifying anything. 
#+begin_src shell
git clone https://github.com/Zilong-Li/PCAone.git
# modify variables in Makefile to use MKL or OpenBlas as backend if needed
cd PCAone
make
#+end_src

*Note:* If this doesn't work because the server is too outdated, run =make clean && make AVX=0= instead.

Since the default compilation is without external MKL or OpenBLAS support, you need to set the =MKLROOT= or =OPENBLAS_ROOT= in *Makefile* to your own path to use one of them as backend. If it complains that there is no =lapack= lib, please install it and set the =LAPACK_ROOT= to the correct path as well. 

*IMPORTANT:* Only =GNU GCC= compiler is supported because MKL threading doesn't support =clang= at the moment. For mac users, you need to make sure the default compiler is =GNU gcc= instead of =clang= by doing the following steps before running =make= command.
#+begin_src shell
brew install gcc
export CC=$(find $(brew --prefix)/bin/ -name "gcc-[0-9]*" | tail -1)
export CXX=$(find $(brew --prefix)/bin/ -name "g++-[0-9]*" | tail -1)
#+end_src

* Documentation
** Input formats

PCAone is designed to be extensible to accept many different formats. Currently, PCAone can work with SNP major genetic formats to study population structure. such as [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]] and [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]]. Also, PCAone supports a general CSV format compressed by zstd assuming the data is already normalized by the users, which is useful for other datasets requiring specific normalization such as single cell RNAs data.
- --beagle :: path of beagle file.
- --bfile :: prefix of PLINK .bed/.bim/.fam files.
- --bgen :: path of BGEN file.
- --csv :: path of zstd compressed CSV file.

** Output files

- eigen vectors :: eigen vectors are saved in file with suffix =.eigvecs=. each row represents a sample and each col represents a PC.
- eigen values :: eigen values are saved in file with suffix =.eigvals=. each row represents the eigenvalue of corresponding PC.
- loadings :: loadings are saved in file with suffix =.loadings=. need to use =--printv= option.

** Options

run =./PCAone --help= to show all options. I feature some useful and important options.

- -f :: use fancy RSVD algorithm in PCAone's paper.
- -h :: use normal RSVD algorithm.
- -n :: number of threads.
- -o :: prefix of output files.
- --bands :: number of bands used by fancy RSVD algorithm. must be =2^x=.
- --cpmed :: normalize values by count per median (CPMED) for scRNAs.
- --maxp :: maximum number of iterations for RSVD algorithm.
- --printv :: print out another eigenvectors or loadings.
- --shuffle :: shuffle the input data first for fancy RSVD algorithm, use it together with =-f=.

** Running mode

PCAone has both in-core and out-of-core mode for each algorithm. In default, PCAone will load all data in memory, which is the fastest way to do calculation. However, it is usually not feasible to keep the whole large matrix in memory. In contrast, PCAone allows user to specify the amount of memory using =-m= option.

* Citation

If you find PCAone helpful, please cite our paper https://github.com/Zilong-Li/PCAone [Paper TBD].

If using EMU algorithm, please also cite [[https://academic.oup.com/bioinformatics/article/37/13/1868/6103565][Large-scale inference of population structure in presence of missingness using PCA]].

If using PCAngsd algorithm, please also cite [[https://www.genetics.org/content/210/2/719][Inferring Population Structure and Admixture Proportions in Low-Depth NGS Data]].

* Acknowledgements

PCAone use [[https://eigen.tuxfamily.org/index.php?title=Main_Page][Eigen]] for linear algebra operation. The IRAM method is based on [[https://github.com/yixuan/spectra][yixuan/spectra]]. The bgen lib is ported from [[https://github.com/jeremymcrae/bgen][jeremymcrae/bgen]]. The EMU and PCAngsd algorithms are modified from [[https://github.com/Rosemeis][@Jonas]] packages.
