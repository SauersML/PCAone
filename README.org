#+TITLE: PCAone - Principal Component Analysis All in One

#+OPTIONS: ^:nil

[[https://github.com/Zilong-Li/PCAone/actions/workflows/linux.yml/badge.svg]]
[[https://github.com/Zilong-Li/PCAone/actions/workflows/mac.yml/badge.svg]]
[[https://img.shields.io/github/v/release/Zilong-Li/PCAone.svg]]
[[https://img.shields.io/github/license/Zilong-Li/PCAone.svg]]
[[https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat]]

PCAone is a fast and memory efficient PCA tool implemented in C++ aiming at providing comprehensive features and algorithms for different scenarios. PCAone implements 3 fast PCA algorithms for finding the top eigenvectors of large datasets, which are [[https://en.wikipedia.org/wiki/Arnoldi_iteration][Implicitly Restarted Arnoldi Method]] (IRAM), [[https://www.ijcai.org/proceedings/2017/468][single pass Randomized SVD]] (RSVD) and our own fancy RSVD method with window based power iterations. For genetics data, PCAone also implements [[https://github.com/Rosemeis/emu][EMU]] and [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm.

[[file:misc/architecture.png]]

* Table of Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#quickstart][Quickstart]]
  - [[#download-pcaone][Download PCAone]]
  - [[#download-examples][Download examples]]
  - [[#run-pcaone][Run PCAone]]
  - [[#make-pca-plots][Make PCA plots]]
- [[#features][Features]]
- [[#installation][Installation]]
  - [[#download-binary][Download binary]]
  - [[#via-conda][Via conda]]
  - [[#build-from-source][Build from source]]
- [[#documentation][Documentation]]
  - [[#input-formats][Input formats]]
  - [[#output-files][Output files]]
  - [[#options][Options]]
  - [[#running-mode][Running mode]]
- [[#citation][Citation]]
- [[#acknowledgements][Acknowledgements]]
#+END_QUOTE

* Quickstart

You can run the following on Linux to get a sense of PCAone usage. More details are explained afterwards.

#+begin_src sh
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip && unzip PCAone-avx2-Linux.zip
wget http://popgen.dk/zilong/datahub/pca/examples.tar.gz && tar -xzf examples.tar.gz
./PCAone --bfile examples/asia -k 10 -n 20 -o out -f --shuffle -m 2 -v
R -s -e 'df=read.table("out.eigvecs", h=F);plot(df[,1:2], xlab="PC1", ylab="PC2");'
#+end_src

** Download PCAone
- Linux
#+begin_src shell
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip || curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Linux.zip
unzip PCAone-avx2-Linux.zip
#+end_src
If your server is too old to support =avx2= instruction, get your boss to buy a new server or download the following version.
#+begin_src shell
wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Linux.zip || curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-x64-Linux.zip
unzip PCAone-x64-Linux.zip
#+end_src

- Mac
#+begin_src shell
curl -LO https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Mac.zip || wget https://github.com/Zilong-Li/PCAone/releases/latest/download/PCAone-avx2-Mac.zip
unzip PCAone-avx2-Mac.zip
#+end_src
Since you are using Mac and rich, I suppose this version just works.

** Download examples
#+begin_src shell
wget http://popgen.dk/zilong/datahub/pca/examples.tar.gz || curl -LO http://popgen.dk/zilong/datahub/pca/examples.tar.gz
tar -xzf examples.tar.gz
#+end_src
You should find a fold named =examples= with some test data.
** Run PCAone

- use *fancy RSVD* method for large datasets
#+begin_src shell
# running in RAM using 10 threads to calculate top 20 PCs
PCAone --bfile examples/asia -k 20 -n 10 -o out -f
# running out of RAM using  only 2GB memory
PCAone --bfile examples/asia -k 20 -n 10 -o out -f --shuffle -m 2
#+end_src

- use *IRAM* algorithm for small or medium datasets
#+begin_src shell
# running out of RAM, only use 2GB memory
PCAone --bfile examples/asia -k 20 -n 10 -o out -m 2
#+end_src

- use *normal RSVD* method for large datasets
#+begin_src shell
# running out of RAM using  only 2GB memory
PCAone --bfile examples/asia -k 20 -n 10 -o out -h -m 2
#+end_src

- run *EMU* with fancy RSVD for data with many missingness
#+begin_src shell
PCAone --bfile examples/test.emu -k 3 -n 10 -o out -f --emu -m 2
#+end_src

- run *PCAngsd* with genotype likelihoods
#+begin_src shell
PCAone --beagle examples/test.bgl.gz -k 3 -n 10 -o out -h --pcangsd
#+end_src

** Make PCA plots

#+begin_src sh
R -s -e 'df=read.table("out.eigvecs", h=F);plot(df[,1:2], xlab="PC1", ylab="PC2");'
#+end_src

* Features

See [[file:CHANGELOG.org][change log]] here.

- Has both Implicitly Restarted Arnoldi Method (IRAM) and Randomized SVD (RSVD) with *out-of-core* implementation.
- Implements our new fast fancy Randomized SVD algorithm for tera-scale dataset.
- Quite fast with multi-threading support using high performance library [[https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onemkl.html#gs.8jsfgz][MKL]] or [[https://www.openblas.net/][OpenBLAS]] as backend.
- Supports the [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]], [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]] genetic data formats.
- Supports [[https://github.com/Rosemeis/emu][EMU]] algorithm for scenario with large proportion of missingness.
- Supports [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm for low coverage sequencing scenario with genotype likelihood as input.
- Supports a general [[https://github.com/facebook/zstd][zstd]] compressed CSV format for scRNAs data

* Installation
** Download binary

There are compiled binaries provided for both Linux and Mac platform. Check [[https://github.com/Zilong-Li/PCAone/releases][the releases page]] to download one or find commands for downloading the latest version in [[#Quickstart][Quickstart]].

** Via conda

The dynamically linked version may be even faster because PCAone will be linked to the faster threading layer =libiomp5= at runtime. You can get it by using =conda= or building from source yourself.

#+begin_src sh
conda config --add channels bioconda
conda install pcaone
#+end_src

*Note*: =avx2= instruction is enabled in default so make sure your server supports it.

** Build from source

- Without MKL or OpenBLAS dependency ::
#+begin_src shell
git clone https://github.com/Zilong-Li/PCAone.git
cd PCAone
make
#+end_src

If this doesn't work because the server is too outdated, run =make clean && make AVX=0= instead. For Mac users, also run =brew install libomp=.

- With MKL or OpenBLAS as backend ::

Install =mkl= first yourself either by using  =conda install mkl mkl-include= or from the website https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html. After having =mkl= installed, find the =mkl= root path and replace the path with your own.
#+begin_src shell
git clone https://github.com/Zilong-Li/PCAone.git
cd PCAone
make MKLROOT=/path/to/your/mklroot
#+end_src

Alternatively, modify variables directly in Makefile and run =make= to use MKL or OpenBlas as backend.

* Documentation
** Input formats

PCAone is designed to be extensible to accept many different formats. Currently, PCAone can work with SNP major genetic formats to study population structure. such as [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]] and [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]]. Also, PCAone supports a general CSV format compressed by zstd assuming the data is already normalized by the users, which is useful for other datasets requiring specific normalization such as single cell RNAs data.

|----------+-----------------------------------------|
| Option   | Descrition                              |
|----------+-----------------------------------------|
| =--bfile=  | prefix of PLINK .bed/.bim/.fam files.   |
| =--beagle= | path of beagle file compressed by gzip. |
| =--bgen=   | path of BGEN file.                      |
| =--csv=    | path of CSV file compressed by zstd.    |
|----------+-----------------------------------------|

** Output files

|-----------+------------------------------------------------------------------------------------------------------------------|
| Output    | Descrition                                                                                                       |
|-----------+------------------------------------------------------------------------------------------------------------------|
| =.eigvecs=  | eigen vectors are saved in file with suffix =.eigvecs=. each row represents a sample and each col represents a PC. |
| =.eigvals=  | eigen values are saved in file with suffix =.eigvals=. each row represents the eigenvalue of corresponding PC.     |
| =.loadings= | loadings are saved in file with suffix =.loadings=. need to use =--printv= option.                                   |
| =.log=      | log is saved in file with suffix =.log=.                                                                           |
|-----------+------------------------------------------------------------------------------------------------------------------|

** Options

run =./PCAone --help= to show all options. I feature some useful and important options below.

|--------------+----------------------------------------------------------------------------------------|
| Option       | Descrition                                                                             |
|--------------+----------------------------------------------------------------------------------------|
| =-f,--fast=    | use fancy RSVD algorithm in PCAone's paper                                             |
| =-h,--halko=   | use normal RSVD algorithm                                                              |
| =-n,--threads= | number of threads                                                                      |
| =-o,--out=     | prefix of output files                                                                 |
| =--cpmed=      | normalize values by count per median (CPMED) for scRNAs.                               |
| =--maxp=       | maximum number of iterations for RSVD algorithm.                                       |
| =--printv=     | print out another eigenvectors or loadings.                                            |
| =--shuffle=    | shuffle the input data first for fancy RSVD algorithm, use it together with =-f= and =-m=. |
| =--bands=      | number of bands used by fancy RSVD algorithm. must be =2^x=.                             |
|--------------+----------------------------------------------------------------------------------------|

** Running mode

PCAone has both in-core and out-of-core mode for each algorithm. In default, PCAone will load all data in memory, which is the fastest way to do calculation. However, it is usually not feasible to keep the whole large matrix in memory. In contrast, PCAone allows user to specify the amount of memory using =-m= option.

* Citation

- If you find PCAone helpful, please cite our paper https://github.com/Zilong-Li/PCAone [Paper TBD].

- If using EMU algorithm, please also cite [[https://academic.oup.com/bioinformatics/article/37/13/1868/6103565][Large-scale inference of population structure in presence of missingness using PCA]].

- If using PCAngsd algorithm, please also cite [[https://www.genetics.org/content/210/2/719][Inferring Population Structure and Admixture Proportions in Low-Depth NGS Data]].

* Acknowledgements

PCAone use [[https://eigen.tuxfamily.org/index.php?title=Main_Page][Eigen]] for linear algebra operation. The IRAM method is based on [[https://github.com/yixuan/spectra][yixuan/spectra]]. The bgen lib is ported from [[https://github.com/jeremymcrae/bgen][jeremymcrae/bgen]]. The EMU and PCAngsd algorithms are modified from [[https://github.com/Rosemeis][@Jonas]] packages.
