#+TITLE: PCAone - Principal Component Analysis All in One

#+OPTIONS: ^:nil

[[https://github.com/Zilong-Li/PCAone/actions/workflows/linux.yml/badge.svg]]
[[https://github.com/Zilong-Li/PCAone/actions/workflows/mac.yml/badge.svg]]
[[https://img.shields.io/github/v/release/Zilong-Li/PCAone.svg]]
[[https://img.shields.io/github/license/Zilong-Li/PCAone.svg]]

PCAone is a fast and memory efficient PCA tool implemented in C++ aiming at providing comprehensive features and algorithms for different scenarios.

[[file:misc/architecture.png]]

* Table of Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#features][Features]]
- [[#installation][Installation]]
  - [[#via-conda][Via conda]]
  - [[#download-binaries][Download binaries]]
  - [[#build-from-source][Build from source]]
- [[#documentation][Documentation]]
  - [[#pca-algorithms][PCA algorithms]]
  - [[#input-formats][Input formats]]
  - [[#output-files][Output files]]
  - [[#advanced-options][Advanced options]]
  - [[#running-mode][Running mode]]
  - [[#examples][Examples]]
- [[#command-line][Command Line]]
- [[#citation][Citation]]
- [[#acknowledgements][Acknowledgements]]
#+END_QUOTE

* Features

See [[file:CHANGELOG.org][change log]] here.

- Has both Implicitly Restarted Arnoldi Method (IRAM) and Halko randomized SVD method with *out-of-core* implementation.
- Implements our new fast fancy randomized SVD algorithm for tera-scale dataset.
- Quite fast with multi-threading support using high performance library [[https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onemkl.html#gs.8jsfgz][MKL]] or [[https://www.openblas.net/][OpenBLAS]] as backend.
- Supports the [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]], [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]] genetic data formats.
- Supports [[https://github.com/Rosemeis/emu][EMU]] algorithm for scenario with large proportion of missingness.
- Supports [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm for low coverage sequencing scenario with genotype likelihood as input.
- Supports a general [[https://github.com/facebook/zstd][zstd]] compressed CSV format for scRNAs data

| *Input format*      | bfile | bgen | beagle | csv |
| *IRAM method*       | +     | +    | +      | +   |
| *One pass rSVD*     | +     | +    | +      | +   |
| *Fast fancy rSVD*   | +     | +/-  | +/-    | +   |
| *EMU algorithm*     | +     | +    | -      | -   |
| *PCAngsd algorithm* | -     | +    | +      | -   |
| *Out-of-core mode*  | +     | +    | -      | +   |

* Installation

** Via conda

If you have conda installed, you can simply run the following command, which will download the MKL dependency for you and fix the runtime library automatically.

#+begin_src sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Zilong-Li/PCAone/main/install.sh)"
#+end_src

** Download binaries

There are compiled binaries provided for both Mac and Linux platform. Check [[https://github.com/Zilong-Li/PCAone/releases][the releases page]] to download them. *Note* that packages named with =iomp5= need runtime library =libiomp5= to be found in your environment =LD_LIBRARY_PATH=, which can speedup further. If you really need it, You can install the lib by =conda install mkl=.

** Build from source

If you don't want to use MKL of OpenBlas as backends, you can just copy and paste the following code in the terminal without modifying anything. 
#+begin_src shell
git clone https://github.com/Zilong-Li/PCAone.git
# modify variables in Makefile to use MKL or OpenBlas as backend
cd PCAone
make
#+end_src
Since the default compilation is without external MKL or OpenBLAS support, you need to set the =MKLROOT= or =OPENBLAS_ROOT= in *Makefile* to your own path to use one of them as backend. If it complains that there is no =lapack= lib, please install it and set the =LAPACK_ROOT= to the correct path as well. 

*IMPORTANT:* Only =GNU GCC= compiler is supported because MKL threading doesn't support =clang= at the moment. For mac users, you need to make sure the default compiler is =GNU gcc= instead of =clang= by doing the following steps before running =make= command.
#+begin_src shell
brew install gcc
export CC=$(find $(brew --prefix)/bin/ -name "gcc-[0-9]*" | tail -1)
export CXX=$(find $(brew --prefix)/bin/ -name "g++-[0-9]*" | tail -1)
#+end_src

* Documentation
** PCA algorithms

PCAone implements two popular fast PCA algorithms for solving the eigenvalues of large datasets. One is [[https://en.wikipedia.org/wiki/Arnoldi_iteration][Implicitly Restarted Arnoldi Method]] (Arnoldi) and the other is [[https://arxiv.org/abs/0909.4061][Randomized SVD]] (Halko).

Specifically, for genetics data, PCAone also implements  [[https://github.com/Rosemeis/emu][EMU]] and [[https://github.com/Rosemeis/pcangsd][PCAngsd]] algorithm.

** Input formats

PCAone is designed to be extensible to accept many different formats. Currently, PCAone can work with SNP major genetic formats to study population structure. such as [[https://www.cog-genomics.org/plink/1.9/formats#bed][PLINK]], [[https://www.well.ox.ac.uk/~gav/bgen_format][BGEN]] and [[http://www.popgen.dk/angsd/index.php/Input#Beagle_format][Beagle]]. In addition, PCAone also supports a general csv format compressed by zstd assuming the data is already normalized by the users, which is useful for other datasets requiring specific normalization such as single cell RNAs data.

** Output files

- eigen vectors :: eigen vectors are saved in file with suffix =.eigvecs=. each row represents a sample and each col represents a PC.
- eigen values :: eigen values are saved in file with suffix =.eigvals=. each row represents the eigenvalue of corresponding PC.
- loadings :: loadings are saved in file with suffix =.loadings=. need to use =--printv= option.

** Advanced options

- --bands :: number of bands used by fancy halko algorithm. must be =2^x=.
- --cpmed :: normalize values by count per median (CPMED) for scRNAs. use this if the input is raw counts.
- --maxp :: maximum number of iterations for halko algorithm.
- --printv :: print out another eigenvectors or loadings.
- --shuffle :: shuffle the input data first for fancy halko algorithm, use it together with =-f=.

** Running mode

PCAone has both in-core and out-of-core mode for each algorithm. In default, PCAone will load all data in memory, which is the fastest way to do calculation. However, it is usually not feasible to keep the whole large matrix in memory. In contrast, PCAone allows user to specify the amount of memory using =-m= option .

** Examples

- use *Default* Arnoldi method for data with small number of samples
#+begin_src shell
# running in RAM
PCAone --bfile input.plink -k 20 -n 20 -o out
# running out of RAM, only use 2GB memory
PCAone --bfile input.plink -k 20 -n 20 -o out -m 2
# for csv format compressed by zstd
PCAone --csv input.csv.zstd -k 20 -n 20 -o out -m 2
#+end_src

- use normal Halko method for large data set
#+begin_src shell
# running in RAM with Halko
PCAone --bfile input.plink -k 20 -n 20 -o out -h
# running out of RAM with Halko, only use 2GB memory
PCAone --bfile input.plink -k 20 -n 20 -o out -h -m 2
#+end_src

- use fast fancy Halko method for crazy huge data set
#+begin_src shell
# running in RAM with fast Halko
PCAone --bfile input.plink -k 20 -n 20 -o out -f --shuffle
# running out of RAM with fast Halko, only use 2GB memory
PCAone --bfile input.plink -k 20 -n 20 -o out -f --shuffle -m 2
#+end_src

- running EMU with super fast halko method
#+begin_src shell
PCAone --bfile input.plink -k 20 -n 20 -o out -f --emu -m 2
#+end_src

- running PCAngsd with super fast halko method
#+begin_src shell
PCAone --beagle input.bgl.gz -k 20 -n 20 -o out -f --pcangsd
#+end_src

* Command Line

#+begin_src plain
Usage:
      --help     Print list of main options.
      --helpall  Print list of all options.

 Main options:
      --beagle FILE    path of beagle file.
      --bfile PREFIX   prefix of PLINK .bed/.bim/.fam files.
      --bgen FILE      path of BGEN file.
      --csv FILE       path of zstd compressed csv file.
      --cpmed          normalize values by count per median(CPMED) for scRNAs
      --maxp INT       maximum number of power iteration for Halko.[20]
      --printv         print out another eigen vectors with suffix .loadings.
      --shuffle        permute data by features for fast Halko.
  -e, --emu            use EMU algorithm for data with lots of missingness.
  -f, --fast           force to use fast super power iterations for Halko.
  -h, --halko          use Halko method instead of default Arnoldi method.
  -k, --eigs INT       top k components to be calculated.[10]
  -m, --memory DOUBLE  specify the RAM usage in GB unit instead of exploiting
                       the RAM of the server.
  -n, --threads INT    number of threads.[1]
  -o, --out PREFIX     prefix of output files.
  -p, --pcangsd        use PCAngsd algorithm for genotype likelihood input.
  -v, --verbose        verbose message output.
  -M, INT              number of features. eg. SNPs.
  -N, INT              number of samples.

#+end_src

*Note*: On most OS it is recommended to limit the number of threads to the number of physical cores.

* Citation

If you find PCAone helpful, please cite our paper https://github.com/Zilong-Li/PCAone [Paper TBD].

If using EMU algorithm, please also cite [[https://academic.oup.com/bioinformatics/article/37/13/1868/6103565][Large-scale inference of population structure in presence of missingness using PCA]].

If using PCAngsd algorithm, please also cite [[https://www.genetics.org/content/210/2/719][Inferring Population Structure and Admixture Proportions in Low-Depth NGS Data]].

* Acknowledgements

PCAone use [[https://eigen.tuxfamily.org/index.php?title=Main_Page][Eigen]] for linear algebra operation. The IRAM method is based on [[https://github.com/yixuan/spectra][yixuan/spectra]]. The bgen lib is ported from [[https://github.com/jeremymcrae/bgen][jeremymcrae/bgen]]. The EMU and PCAngsd algorithms are modified from [[https://github.com/Rosemeis][@Jonas]] packages.
